{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alexforest/Desktop/memory-game/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\n/*import Card from './components/Card';*/\n\n/*import Cards from './components/Cards';*/\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cardsArr: [{\n        name: \"card1\",\n        id: 1,\n        isClicked: false,\n        type: \"a\",\n        removed: false\n      }, {\n        name: \"card2\",\n        id: 2,\n        isClicked: false,\n        type: \"b\",\n        removed: false\n      }, {\n        name: \"card3\",\n        id: 3,\n        isClicked: false,\n        type: \"c\",\n        removed: false\n      }, {\n        name: \"card4\",\n        id: 4,\n        isClicked: false,\n        type: \"d\",\n        removed: false\n      }, {\n        name: \"card5\",\n        id: 5,\n        isClicked: false,\n        type: \"e\",\n        removed: false\n      }, {\n        name: \"card6\",\n        id: 6,\n        isClicked: false,\n        type: \"f\",\n        removed: false\n      }, {\n        name: \"card7\",\n        id: 7,\n        isClicked: false,\n        type: \"g\",\n        removed: false\n      }, {\n        name: \"card8\",\n        id: 8,\n        isClicked: false,\n        type: \"h\",\n        removed: false\n      }, {\n        name: \"card9\",\n        id: 9,\n        isClicked: false,\n        type: \"a\",\n        removed: false\n      }, {\n        name: \"card10\",\n        id: 10,\n        isClicked: false,\n        type: \"b\",\n        removed: false\n      }, {\n        name: \"card11\",\n        id: 11,\n        isClicked: false,\n        type: \"c\",\n        removed: false\n      }, {\n        name: \"card12\",\n        id: 12,\n        isClicked: false,\n        type: \"d\",\n        removed: false\n      }, {\n        name: \"card13\",\n        id: 13,\n        isClicked: false,\n        type: \"e\",\n        removed: false\n      }, {\n        name: \"card14\",\n        id: 14,\n        isClicked: false,\n        type: \"f\",\n        removed: false\n      }, {\n        name: \"card15\",\n        id: 15,\n        isClicked: false,\n        type: \"g\",\n        removed: false\n      }, {\n        name: \"card16\",\n        id: 16,\n        isClicked: false,\n        type: \"h\",\n        removed: false\n      }],\n      twoClicked: false\n    };\n\n    this.flipCardHandler = id => {\n      /* let x = this.state.cardsArr.find((el) => {\n        return el.id === id;\n      }); */\n      const arrZ = [...this.state.cardsArr];\n      const elZ = arrZ[id - 1];\n      elZ.isClicked = !elZ.isClicked;\n      /* console.log(elZ);\n      console.log(arrZ); */\n\n      this.setState({\n        cardsArr: arrZ\n      });\n      /* console.log(x);\n      let newName = \"card\" + x.id;\n      this.setState({cardsArr: [\n        {name: newName, id: x.id, isClicked: !this.state.isClicked}\n      ]\n        }) */\n\n      /* let y = <Card name={x.name} key={x.id}/>;\n      console.log(y);\n      let z = window.getComputedStyle(y);\n      console.log(z); */\n    };\n\n    this.removeHandler = (id1, id2) => {\n      /* let nArr = [...this.state.cardsArr];\n      console.log(\"win\"); */\n      let nArr = this.state.cardsArr;\n      nArr.forEach((el, index) => {\n        if (nArr[index].id === id1) {\n          nArr[index].removed = true;\n        }\n\n        if (nArr[index].id === id2) {\n          nArr[index].removed = true;\n        }\n      });\n      /* console.log(nArr); */\n\n      /*  this.setState({cardsArr: nArr}); */\n    };\n\n    this.setFalseHandler = () => {\n      const nArr = this.state.cardsArr;\n      nArr.map((card, index) => {\n        return nArr[index].isClicked = false;\n      });\n      this.setState({\n        cardsArr: nArr\n      });\n      console.log(nArr);\n    };\n  }\n\n  render() {\n    const style1 = {\n      backgroundColor: \"transparent\",\n      cursor: \"none\"\n    };\n    const style2 = {\n      backgroundColor: \"blue\"\n    };\n    let cards = this.state.cardsArr.map(card => {\n      /* return <Card name={card.name} color={card.color} click={() => this.flipCardHandler(card.id)} key={card.id} /> */\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Ccard\",\n        name: card.name,\n        id: card.id,\n        style: this.state.cardsArr[card.id - 1].removed ? style1 : this.state.cardsArr[card.id - 1].isClicked ? style2 : null,\n        onClick: (() => this.flipCardHandler(card.id), console.log(this.state.cardsArr))\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 14\n      }, this);\n    });\n    let sc = [];\n    const newArr = [...this.state.cardsArr];\n    /*console.log(newArr);*/\n\n    let selectedCards = newArr.forEach((card, index) => {\n      /*console.log(\"this is: \" + newArr[index].isClicked);*/\n      if (newArr[index].isClicked === true) {\n        sc.push(newArr[index]);\n      }\n\n      ;\n      return sc;\n    });\n    /*console.log(sc);*/\n\n    if (sc.length === 2) {\n      //IF CARDS MATCH\n      if (sc[0].type === sc[1].type) {\n        this.removeHandler(sc[0].id, sc[1].id);\n      } else {\n        //IF CARDS DONT MATCH\n        this.setFalseHandler();\n      }\n    }\n    /* const style = {\n      display: 'flex',\n      flexWrap: 'wrap',\n      width: '60%',\n      backgroundColor: 'thistle',\n      margin: 'auto'\n    } */\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Shell Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Cards\",\n        children: cards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/alexforest/Desktop/memory-game/src/App.js"],"names":["React","Component","App","state","cardsArr","name","id","isClicked","type","removed","twoClicked","flipCardHandler","arrZ","elZ","setState","removeHandler","id1","id2","nArr","forEach","el","index","setFalseHandler","map","card","console","log","render","style1","backgroundColor","cursor","style2","cards","sc","newArr","selectedCards","push","length"],"mappings":"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","sourcesContent":["\nimport './App.css';\nimport React, { Component }from 'react';\n\n/*import Card from './components/Card';*/\n/*import Cards from './components/Cards';*/\n\nclass App extends Component {\n  state = {\n    cardsArr: [\n      {name: \"card1\", id: 1, isClicked: false, type: \"a\", removed: false},\n      {name: \"card2\", id: 2, isClicked: false, type: \"b\", removed: false},\n      {name: \"card3\", id: 3, isClicked: false, type: \"c\", removed: false},\n      {name: \"card4\", id: 4, isClicked: false, type: \"d\", removed: false},\n      {name: \"card5\", id: 5, isClicked: false, type: \"e\", removed: false},\n      {name: \"card6\", id: 6, isClicked: false, type: \"f\", removed: false},\n      {name: \"card7\", id: 7, isClicked: false, type: \"g\", removed: false},\n      {name: \"card8\", id: 8, isClicked: false, type: \"h\", removed: false},\n      {name: \"card9\", id: 9, isClicked: false, type: \"a\", removed: false},\n      {name: \"card10\", id: 10, isClicked: false, type: \"b\", removed: false},\n      {name: \"card11\", id: 11, isClicked: false, type: \"c\", removed: false},\n      {name: \"card12\", id: 12, isClicked: false, type: \"d\", removed: false},\n      {name: \"card13\", id: 13, isClicked: false, type: \"e\", removed: false},\n      {name: \"card14\", id: 14, isClicked: false, type: \"f\", removed: false},\n      {name: \"card15\", id: 15, isClicked: false, type: \"g\", removed: false},\n      {name: \"card16\", id: 16, isClicked: false, type: \"h\", removed: false},\n    ],\n    twoClicked: false\n  };\n\n  flipCardHandler = (id) => {\n    /* let x = this.state.cardsArr.find((el) => {\n      return el.id === id;\n    }); */\n    const arrZ = [...this.state.cardsArr];\n    const elZ = arrZ[id - 1];\n    elZ.isClicked = !elZ.isClicked;\n    /* console.log(elZ);\n    console.log(arrZ); */\n\n    this.setState({cardsArr: arrZ})\n\n    /* console.log(x);\n    let newName = \"card\" + x.id;\n    this.setState({cardsArr: [\n      {name: newName, id: x.id, isClicked: !this.state.isClicked}\n    ]\n      }) */\n    /* let y = <Card name={x.name} key={x.id}/>;\n    console.log(y);\n    let z = window.getComputedStyle(y);\n    console.log(z); */\n  }\n\n  /* removeHandler = (id1, id2) => {\n    const nArr = [...this.state.cardsArr];\n    const firstId = nArr.find((el) => {\n      if (nArr[el].id === id1) {\n        return nArr[el].id;\n      }\n    });\n    const secondId = nArr.find((el) => {\n      if (nArr[el].id === id2) {\n        return nArr[el].id;\n      }\n    });\n    nArr.forEach((el) => {\n      if (nArr[el].id === firstId) {\n        nArr.splice(firstId, 1);\n      }\n      if (nArr[el].id === secondId) {\n        nArr.splice(secondId, 1);\n      }\n    });\n    console.log(nArr);\n\n  } */\n  removeHandler = (id1, id2) => {\n      /* let nArr = [...this.state.cardsArr];\n      console.log(\"win\"); */\n      let nArr = this.state.cardsArr;\n      nArr.forEach((el, index) => {\n        if (nArr[index].id === id1) {\n            nArr[index].removed = true;\n        }\n        if (nArr[index].id === id2) {\n            nArr[index].removed = true;\n        }\n      });\n      /* console.log(nArr); */\n     /*  this.setState({cardsArr: nArr}); */\n  }\n\n  setFalseHandler = () => {\n    const nArr = this.state.cardsArr;\n      nArr.map((card, index) => {\n        return nArr[index].isClicked = false;\n      })\n      this.setState({cardsArr: nArr})\n      console.log(nArr);\n  }\n\n  render() {\n    const style1 = {\n      backgroundColor: \"transparent\",\n      cursor: \"none\"\n    }\n    const style2 = {\n      backgroundColor: \"blue\",\n    }\n\n\n    let cards = this.state.cardsArr.map((card) => {\n      /* return <Card name={card.name} color={card.color} click={() => this.flipCardHandler(card.id)} key={card.id} /> */\n      return <div className=\"Ccard\"\n                  name={card.name} \n                  id={card.id} \n                  style={\n                    this.state.cardsArr[card.id -1].removed ? style1\n                    : this.state.cardsArr[card.id - 1].isClicked ? style2 \n                    : null} \n                  onClick={() => this.flipCardHandler(card.id), console.log(this.state.cardsArr)} \n                  key={card.id}></div>\n    })\n\n    let sc = [];\n    const newArr = [...this.state.cardsArr];\n    /*console.log(newArr);*/\n    let selectedCards = newArr.forEach((card, index) => {\n      /*console.log(\"this is: \" + newArr[index].isClicked);*/\n      if (newArr[index].isClicked === true) {\n          sc.push(newArr[index]);\n      };\n      return sc;\n    })\n    /*console.log(sc);*/\n    if (sc.length === 2) {\n      \n      //IF CARDS MATCH\n      if (sc[0].type === sc[1].type) {\n        this.removeHandler(sc[0].id, sc[1].id);\n      } else {\n        //IF CARDS DONT MATCH\n        this.setFalseHandler();\n      }\n    }\n    /* const style = {\n      display: 'flex',\n      flexWrap: 'wrap',\n      width: '60%',\n      backgroundColor: 'thistle',\n      margin: 'auto'\n    } */\n\n    return (\n      <div className=\"App\">\n        <h1>Shell Game</h1>\n        {/* <Cards cardsArr={this.state.cardsArr} click={(cardName) => {\n          return this.flipCardHandler(this.state.cardsArr)}\n        }/>\n        <button style={style}></button> */}\n        <div className=\"Cards\">\n          {cards}\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}