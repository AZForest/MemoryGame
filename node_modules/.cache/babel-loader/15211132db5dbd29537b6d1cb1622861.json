{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alexforest/Desktop/memory-game/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\n/*import Card from './components/Card';*/\n\n/*import Cards from './components/Cards';*/\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cardsArr: [{\n        name: \"card1\",\n        id: 1,\n        isClicked: false\n      }, {\n        name: \"card2\",\n        id: 2,\n        isClicked: false\n      }, {\n        name: \"card3\",\n        id: 3,\n        isClicked: false\n      }, {\n        name: \"card4\",\n        id: 4,\n        isClicked: false\n      }, {\n        name: \"card5\",\n        id: 5,\n        isClicked: false\n      }, {\n        name: \"card6\",\n        id: 6,\n        isClicked: false\n      }, {\n        name: \"card7\",\n        id: 7,\n        isClicked: false\n      }, {\n        name: \"card8\",\n        id: 8,\n        isClicked: false\n      }, {\n        name: \"card9\",\n        id: 9,\n        isClicked: false\n      }, {\n        name: \"card10\",\n        id: 10,\n        isClicked: false\n      }, {\n        name: \"card11\",\n        id: 11,\n        isClicked: false\n      }, {\n        name: \"card12\",\n        id: 12,\n        isClicked: false\n      }, {\n        name: \"card13\",\n        id: 13,\n        isClicked: false\n      }, {\n        name: \"card14\",\n        id: 14,\n        isClicked: false\n      }, {\n        name: \"card15\",\n        id: 15,\n        isClicked: false\n      }, {\n        name: \"card16\",\n        id: 16,\n        isClicked: false\n      }],\n      twoClicked: false\n    };\n\n    this.flipCardHandler = id => {\n      /* let x = this.state.cardsArr.find((el) => {\n        return el.id === id;\n      }); */\n      const arrZ = [...this.state.cardsArr];\n      const elZ = arrZ[id - 1];\n      elZ.isClicked = !elZ.isClicked;\n      /* console.log(elZ);\n      console.log(arrZ); */\n\n      this.setState({\n        cardsArr: arrZ\n      });\n      /* console.log(x);\n      let newName = \"card\" + x.id;\n      this.setState({cardsArr: [\n        {name: newName, id: x.id, isClicked: !this.state.isClicked}\n      ]\n        }) */\n\n      /* let y = <Card name={x.name} key={x.id}/>;\n      console.log(y);\n      let z = window.getComputedStyle(y);\n      console.log(z); */\n    };\n  }\n\n  render() {\n    const style = {\n      backgroundColor: \"blue\"\n    };\n    let cards = this.state.cardsArr.map(card => {\n      /* return <Card name={card.name} color={card.color} click={() => this.flipCardHandler(card.id)} key={card.id} /> */\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Ccard\",\n        name: card.name,\n        id: card.id,\n        style: this.state.cardsArr[card.id - 1].isClicked ? style : null,\n        onClick: () => this.flipCardHandler(card.id)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 14\n      }, this);\n    });\n    let sc = [];\n    const newArr = [...this.state.cardsArr];\n    console.log(newArr);\n    let selectedCards = newArr.forEach((card, index) => {\n      console.log(\"this is: \" + newArr[index][0]);\n\n      if (newArr[index].isClicked === true) {\n        sc.push(newArr[card]);\n      }\n\n      return sc;\n    });\n    console.log(selectedCards);\n    /* const style = {\n      display: 'flex',\n      flexWrap: 'wrap',\n      width: '60%',\n      backgroundColor: 'thistle',\n      margin: 'auto'\n    } */\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Shell Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Cards\",\n        children: cards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/alexforest/Desktop/memory-game/src/App.js"],"names":["React","Component","App","state","cardsArr","name","id","isClicked","twoClicked","flipCardHandler","arrZ","elZ","setState","render","style","backgroundColor","cards","map","card","sc","newArr","console","log","selectedCards","forEach","index","push"],"mappings":"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","sourcesContent":["\nimport './App.css';\nimport React, { Component }from 'react';\n\n/*import Card from './components/Card';*/\n/*import Cards from './components/Cards';*/\n\nclass App extends Component {\n  state = {\n    cardsArr: [\n      {name: \"card1\", id: 1, isClicked: false},\n      {name: \"card2\", id: 2, isClicked: false},\n      {name: \"card3\", id: 3, isClicked: false},\n      {name: \"card4\", id: 4, isClicked: false},\n      {name: \"card5\", id: 5, isClicked: false},\n      {name: \"card6\", id: 6, isClicked: false},\n      {name: \"card7\", id: 7, isClicked: false},\n      {name: \"card8\", id: 8, isClicked: false},\n      {name: \"card9\", id: 9, isClicked: false},\n      {name: \"card10\", id: 10, isClicked: false},\n      {name: \"card11\", id: 11, isClicked: false},\n      {name: \"card12\", id: 12, isClicked: false},\n      {name: \"card13\", id: 13, isClicked: false},\n      {name: \"card14\", id: 14, isClicked: false},\n      {name: \"card15\", id: 15, isClicked: false},\n      {name: \"card16\", id: 16, isClicked: false},\n    ],\n    twoClicked: false\n  };\n\n  flipCardHandler = (id) => {\n    /* let x = this.state.cardsArr.find((el) => {\n      return el.id === id;\n    }); */\n    const arrZ = [...this.state.cardsArr];\n    const elZ = arrZ[id - 1];\n    elZ.isClicked = !elZ.isClicked;\n    /* console.log(elZ);\n    console.log(arrZ); */\n\n    this.setState({cardsArr: arrZ})\n\n    /* console.log(x);\n    let newName = \"card\" + x.id;\n    this.setState({cardsArr: [\n      {name: newName, id: x.id, isClicked: !this.state.isClicked}\n    ]\n      }) */\n    /* let y = <Card name={x.name} key={x.id}/>;\n    console.log(y);\n    let z = window.getComputedStyle(y);\n    console.log(z); */\n  }\n\n  render() {\n    const style = {\n      backgroundColor: \"blue\"\n    }\n\n\n    let cards = this.state.cardsArr.map((card) => {\n      /* return <Card name={card.name} color={card.color} click={() => this.flipCardHandler(card.id)} key={card.id} /> */\n      return <div className=\"Ccard\" name={card.name} id={card.id} style={this.state.cardsArr[card.id - 1].isClicked ? style : null} onClick={() => this.flipCardHandler(card.id)} key={card.id}></div>\n    })\n\n    let sc = [];\n    const newArr = [...this.state.cardsArr];\n    console.log(newArr);\n    let selectedCards = newArr.forEach((card, index) => {\n      console.log(\"this is: \" + newArr[index][0]);\n      if (newArr[index].isClicked === true) {\n        sc.push(newArr[card]);\n      }\n      return sc;\n    })\n    console.log(selectedCards);\n    /* const style = {\n      display: 'flex',\n      flexWrap: 'wrap',\n      width: '60%',\n      backgroundColor: 'thistle',\n      margin: 'auto'\n    } */\n\n    return (\n      <div className=\"App\">\n        <h1>Shell Game</h1>\n        {/* <Cards cardsArr={this.state.cardsArr} click={(cardName) => {\n          return this.flipCardHandler(this.state.cardsArr)}\n        }/>\n        <button style={style}></button> */}\n        <div className=\"Cards\">\n          {cards}\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}